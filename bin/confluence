#!/usr/bin/env node
// -*- mode: js -*-

var toMarkdown =                  require('to-markdown');
var util =                        require('util');
var Confluence =                  require('../lib/Confluence');
var fs =                          require('fs');
var argv =                        require('yargs').argv;
var config =                      require('../config/confluenceConfig');
var program =                     require('commander')
var version =                     require('../package.json').version;
var name =                        require('../package.json').name;
var prompt =                      require('prompt');
var colors =                      require('colors/safe');
var fileHelper =                  require('../lib/fileHelper');

var expand = "body.view,history,children.page.results.body.view,ancestors,descendants.page,space";

program
	.version(version)
	.option('-t --title [type]', 'Page or space title')
	.option('-d --data_path [type]', 'The path to store the markdown pages')
	.option('-u --username [type]', 'The username of your Confluence account')
	.option('-p --password [type]', 'The password of your Confluence account')
	.option('-r --public_dir[type] ', 'The public directory ')
	.option('-i --img_dir [type]', 'The image path to store images');

program
	.command('show_configs')
	.description('show current configuration')
	.action(function() {
		var configs = fileHelper.loadConfigration();
		if(configs) {
			console.log(colors.green("Current configs:"), configs);	
		} else {
			console.log(colors.green("Please generate configurations by using create_configs command!!!"))
		}
	});

program
	.command('create_configs') 
	.description('create configurations')
	.action(function() {
		var schema = {
			properties: {
				base_url: {
					require: true,
					description: colors.magenta("What is confluence\'s base url?")
				},
				username: {
					require: true,
					description: colors.magenta("What is confluence\'s user name?")
				},
				password: {
					hidden: true,
					require: true,
					description: colors.magenta("What is confluence\'s user password?")
				},
				"data_path": {
					require: true,
					description: colors.magenta("Where is the place to store the markdown files?")
				},
				"public_dir": {
					require: true,
					description: colors.magenta("Where is the place to store the asserts (public folder)?")
				},
				"img_path": {
					require: true,
					description: colors.magenta("Where is the place to store the images under public directory?")
				}
			}
		}
		prompt.message = colors.white(name);
		prompt.start();
		console.log(colors.green("Please answer these questions to create configurations!!!"))
		prompt.get(schema, function(err, result) {
			if (err) { 
				onErr(err);
			}
			// var oldConfig = fileHelper.loadConfigration();
			var newConfig = {
				'baseUrl': result.base_url,
				"baseUri": "/rest/api/content",
				"dataPath": result.data_path,
				"username": result.username,
				"password": result.password,
				"publicDir": result.public_dir,
				"imagePath": result.img_path
			}
			fileHelper.saveConfiguration(newConfig).then(function(){
				console.log("Configration save sucessfully");
				process.exit(1);
			}, function(err){
				console.log("There has been an error saving configurations");
				onErr(err);
			});	
    		
		});
	});

program.parse(process.argv);

function onErr(err) {
	console.log(err);
	process.exit(0);
}

// if(program.title === "") {
//     console.log("Please enter a module with option -t {title} or --title={title}");
//     return;
// } else {
// 	console.log("Title", program.title);
// }
// var confluence = Confluence({
//     username: config.username,
//     password: config.password,
//     dataPath: dataPath
// });

// confluence.getContent({
//     "title": title,
//     "expand": expand
// });

