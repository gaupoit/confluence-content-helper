#!/usr/bin/env node
// -*- mode: js -*-

var toMarkdown =                  require('to-markdown');
var util =                        require('util');
var Confluence =                  require('../lib/Confluence');
var fs =                          require('fs');
var applicationConfig =           require('../config/confluenceConfig');
var program =                     require('commander');
var version =                     require('../package.json').version;
var name =                        require('../package.json').name;
var repositoryUrl=                require('../package.json').repository.url;
var prompt =                      require('prompt');
var colors =                      require('colors/safe');
var fileHelper =                  require('../lib/fileHelper');

program
  .version('0.0.1')
  .option('-p, --peppers', 'Add peppers')
  .option('-P, --pineapple', 'Add pineapple')
  .option('-b, --bbq-sauce', 'Add bbq sauce')
  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')
  .parse(process.argv);

program
	.command('show_configs')
	.description('show current configuration')
	.action(function() {
		fileHelper.checkDefaultConfigFileExists().then(function(){
			var configs = fileHelper.loadConfigration();
			if(configs) {
				console.log(colors.green("Current configs:"));
				console.log(configs);	
			} else {
				console.log(colors.green("Please generate configurations by using create_configs command!!!"))
			}
			process.exit(1);
		}, function(err){
			cannotFindConfigFile();
		});
		
	});

program
	.command('create_configs') 
	.description('create configurations')
	.action(function() {
		_createConfig();
	});

program
	.command("get_content [title]")
	.description("Get confluence content by space or page\'s title")
	.action(function(title) {
		fileHelper.checkDefaultConfigFileExists().then(function(){
			console.log(colors.green("Getting page and sub pages: ", title));
			if(title) {	
				var expand = "body.view,history,children.page.results.body.view,ancestors,descendants.page,space";
				var config = fileHelper.loadConfigration();
				var confluence = Confluence(config);
				confluence.getContent({
				    "title": title,
				    "expand": expand
				});
			} else {
				console.log(colors.red("Please enter space or page\'s title by using this get_content [title]"));
				process.exit(1);
			}
		}, function(err) {
			cannotFindConfigFile();
		});
		
	});

program.parse(process.argv);

process.on('exit', (code) => {
	if(code >= 0) {
		console.log(colors.green("Got work done. Good bye and see you again!!!"));
	} else {
		console.log(colors.yellow("Got work failed. Please try again or report the issues at:", repositoryUrl));
	}
});
function onErr(err) {
	console.log(err);
	process.exit(-1);
}

function cannotFindConfigFile() {
	console.log(colors.red("Please create configuration file first by using create_configs command!!!"))
	process.exit(-1);
}

function _createConfig() {
	var schema = {
		properties: {
			base_url: {
				require: true,
				description: colors.magenta("What is confluence\'s base url?")
			},
			username: {
				require: true,
				description: colors.magenta("What is confluence\'s user name?")
			},
			password: {
				hidden: true,
				require: true,
				description: colors.magenta("What is confluence\'s user password?")
			},
			"data_path": {
				require: true,
				description: colors.magenta("Where is the place to store the markdown files?")
			},
			"public_dir": {
				require: true,
				description: colors.magenta("Where is the place to store the asserts (public folder)?")
			},
			"img_path": {
				require: true,
				description: colors.magenta("Where is the place to store the images under public directory?")
			}
		}
	}
	prompt.message = colors.white(name);
	prompt.start();
	console.log(colors.green("Please answer these questions to create configurations!!!"))
	prompt.get(schema, function(err, result) {
		if (err) { 
			onErr(err);
		}
		var newConfig = {
			'baseUrl': result.base_url,
			"baseUri": applicationConfig.baseUri,
			"dataPath": result.data_path,
			"username": result.username,
			"password": result.password,
			"publicDir": result.public_dir,
			"imagePath": result.img_path
		}
		fileHelper.saveConfiguration(newConfig).then(function(){
			console.log("Configration save sucessfully");
			process.exit(1);
		}, function(err){
			console.log("There has been an error saving configurations");
			onErr(err);
		});	
	  		
	});
}


